# Create a function taking a positive integer as its parameter and returning a string containing the Roman Numeral representation of that integer.
# 
# Modern Roman numerals are written by expressing each digit separately starting with the left most digit and skipping any digit with a value of zero. In Roman numerals 1990 is rendered: 1000=M, 900=CM, 90=XC; resulting in MCMXC. 2008 is written as 2000=MM, 8=VIII; or MMVIII. 1666 uses each Roman symbol in descending order: MDCLXVI.
# 
# Example:
# 
# solution(1000) # should return 'M'
# Help:
# 
# Symbol    Value
# I          1
# V          5
# X          10
# L          50
# C          100
# D          500
# M          1,000
# Remember that there can't be more than 3 identical symbols in a row.
# 
# More about roman numerals - http://en.wikipedia.org/wiki/Roman_numerals
# ---------------------------------------------------------------------

def solution(n):
    number = n
    i, j, digits, roman_number = 0, 1000, [], ""
    while i < 4:
        if number >= j:
            digits.append(number // j) # striping to digits
            number -= digits[i] * j
        else:
            digits.append(0)
  # ----------------------------          
        if i == 0:                            # first_digit
            if digits[i] > 0:
                roman_number += (digits[i] * "M")
  # ----------------------------
        elif i == 1:                          # second_digit
            if digits[i] > 0:
                if digits[i] < 4:               roman_number += digits[i] * "C";
                if digits[i] == 4:                         roman_number += "CD"
                if digits[i] > 4 and digits[i] < 9:        roman_number += "D" + ((digits[i] - 5) * "C")
                if digits[i] == 9 : roman_number += "CM"
  # ----------------------------
        elif i == 2:                          # third_digit
            if digits[i] > 0:
                if digits[i] < 4:               roman_number += digits[i] * "X";
                if digits[i] == 4:                         roman_number += "XL"
                if digits[i] > 4 and digits[i] < 9:        roman_number += "L" + ((digits[i] - 5) * "X")
                if digits[i] == 9 : roman_number += "XC"
  # ----------------------------
        elif i == 3:                          # fourth_digit
            if digits[i] > 0:
                if digits[i] < 4:               roman_number += digits[i] * "I";
                if digits[i] == 4:                         roman_number += "IV"
                if digits[i] > 4 and digits[i] < 9:        roman_number += "V" + ((digits[i] - 5) * "I")
                if digits[i] == 9 : roman_number += "IX"
  # ----------------------------
  
        j = int(j/10)
        i += 1
   
    return roman_number
