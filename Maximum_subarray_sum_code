# The maximum sum subarray problem consists in finding the maximum sum of a contiguous subsequence in an array or list of integers:

# max_sequence([-2, 1, -3, 4, -1, 2, 1, -5, 4])
# should be 6: [4, -1, 2, 1]
# Easy case is when the list is made up of only positive numbers and the maximum sum is the sum of the whole array. 
# If the list is made up of only negative numbers, return 0 instead.

# Empty list is considered to have zero greatest sum. Note that the empty list or array is also a valid sublist/subarray.
# ---------------------------------------------------------------------------------------------------------------------------------

def max_sequence(arr):
    i = j = z = k = addition = addition_2 = max_number = 0
    while j <= len(arr):   
        while i+j <= len(arr):   
            while k < j:                
                addition = addition + arr[z] 
                if z < len(arr)-1:                    
                    z += 1                      
                k += 1 
            if addition > addition_2:
                addition_2 = addition
            addition, k = 0, 0
            i += 1
            z = i
            if addition_2 > max_number:
                max_number = addition_2
        addition_2 = z = i = 0    
        j += 1  
    return max_number
